#include "cuda_structs.h"

DEVICE_VAR CONST_MEMORY none_t NONE_OPT = {};

//curve order field

DEVICE_VAR CONST_MEMORY uint256_g EMBEDDED_FIELD_P = { 0xf0000001, 0x43e1f593, 0x79b97091, 0x2833e848, 0x8181585d, 0xb85045b6, 0xe131a029, 0x30644e72 };
DEVICE_VAR CONST_MEMORY uint256_g EMBEDDED_FIELD_R = { 0x4ffffffb, 0xac96341c, 0x9f60cd29, 0x36fc7695, 0x7879462e, 0x666ea36f, 0x9a07df2f, 0xe0a77c1 };
DEVICE_VAR CONST_MEMORY uint32_t EMBEDDED_FIELD_N = 0xefffffff;

//base field

DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_P = { 0xd87cfd47, 0x3c208c16, 0x6871ca8d, 0x97816a91, 0x8181585d, 0xb85045b6, 0xe131a029, 0x30644e72 };
DEVICE_VAR CONST_MEMORY uint32_t BASE_FIELD_N = 0xe4866389;
DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R = { 0xc58f0d9d, 0xd35d438d, 0xf5c70b3d, 0x0a78eb28, 0x7879462c, 0x666ea36f, 0x9a07df2f, 0xe0a77c1 };
DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R2 = { 0x8b1e1b3a, 0xa6ba871b, 0xeb8e167b, 0x14f1d651, 0xf0f28c58, 0xccdd46de, 0x340fbe5e, 0x1c14ef83 };
DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R3 = { 0x50ad28d7, 0x7a17caa9, 0xe15521b9, 0x1f6ac17a, 0x696bd284, 0x334bea4e, 0xce179d8e, 0x2a1f6744 };
DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R4 = { 0x3dbf392d, 0x11548220, 0x6eaa626a, 0x92624212, 0x6063c052, 0xe16a4807, 0x86eddc93, 0x7c59093 };
DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R8 = { 0x7b7e725a, 0x22a90440, 0xdd54c4d4, 0x24c48424, 0xc0c780a5, 0xc2d4900e, 0x0ddbb927, 0xf8b2127 };

DEVICE_VAR CONST_MEMORY uint256_g MAGIC_CONSTANT = { 0xb61f3f52, 0x4f082305, 0x5a1c72a3, 0x65e05aa4, 0xa0605617, 0x6e14116d, 0xb84c680a, 0xc19139c };

//this fconstant is used in Kasinski algorithm: that is fast field inversion in Montgomety form

DEVICE_VAR CONST_MEMORY uint256_g BASE_FIELD_R_SQUARED = { 0x538afa89, 0xf32cfc5b, 0xd44501fb, 0xb5e71911, 0x0a417ff6, 0x47ab1eff, 0xcab8351f, 0x6d89f71 };


//elliptic curve params

DEVICE_VAR CONST_MEMORY uint256_g CURVE_A_COEFF = { 0, 0, 0, 0, 0, 0, 0, 0 };
DEVICE_VAR CONST_MEMORY uint256_g CURVE_B_COEFF = { 0x50ad28d7, 0x7a17caa9, 0xe15521b9, 0x1f6ac17a, 0x696bd284, 0x334bea4e, 0xce179d8e, 0x2a1f6744 };
DEVICE_VAR CONST_MEMORY ec_point CURVE_G = {
	{ 0xc58f0d9d, 0xd35d438d, 0xf5c70b3d, 0x0a78eb28, 0x7879462c, 0x666ea36f, 0x9a07df2f, 0xe0a77c1 },
	{ 0x8b1e1b3a, 0xa6ba871b, 0xeb8e167b, 0x14f1d651, 0xf0f28c58, 0xccdd46de, 0x340fbe5e, 0x1c14ef83 },
	{ 0xc58f0d9d, 0xd35d438d, 0xf5c70b3d, 0x0a78eb28, 0x7879462c, 0x666ea36f, 0x9a07df2f, 0xe0a77c1 }
};


//this are used for FFT
//this array contains all 2-adic powers of root of unity w: w, w^2, w^4, ..., w^N,
//where N = 28  

DEVICE_FUNC size_t ROOTS_OF_UNTY_ARR_LEN = 28;
DEVICE_FUNC CONST_MEMORY uint256_g EMBEDDED_FIELD_ROOTS_OF_UNITY[] = {
	{ 0x80d13d9c, 0x636e7355, 0x2445ffd6, 0xa22bf374, 0x1eb203d8, 0x56452ac0, 0x2963f9e7, 0x1860ef94 },
	{ 0x80890267, 0x87596414, 0xe4c00349, 0x4a3a78b5, 0x52a6b17e, 0x49004fdd, 0x65e6ea12, 0x284517dd },
	{ 0xc98a20fe, 0xa0a29422, 0x65935c9d, 0x73d462ca, 0xd44582f7, 0xe1ba4a6e, 0x0c3a82b6, 0x28fc14c0 },
	{ 0x575c07e2, 0x400efaff, 0x4b8f9ac5, 0x55237349, 0x81e7ad37, 0xaa79abed, 0x084d2e39, 0x1ac6e5b8 },
	{ 0xd84fd030, 0xc722bd69, 0xcf52162c, 0x600e4a26, 0x45f3a7e9, 0xfb727ed7, 0x69fb275c, 0x1652a7b2 },
	{ 0xc09e9100, 0x6e482404, 0x590025b2, 0x0d7591c7, 0x3a5ebe11, 0xa4022779, 0xc1a94ca8, 0x0164a6c3 },
	{ 0xbcef1af2, 0x9b8e226e, 0xdf406b60, 0x9e45f1ab, 0xd5a7bb3d, 0x538dd257, 0x7882a3bc, 0x0a389303 },
	{ 0xf5322f3c, 0x27ea2192, 0x658fe9a7, 0xb11884e9, 0xa053c069, 0x3a8623bc, 0x25e139a6, 0x128ff3f0 },
	{ 0xaa8d931a, 0xda32d465, 0x61808f9c, 0x2669f685, 0xe4c8b085, 0x247bab46, 0x81d6021a, 0x0d3b6687 },
	{ 0xe6a27a36, 0x049ea3b7, 0x053edbbc, 0xefebe603, 0x3ace9ed4, 0x8424b45a, 0xa688795e, 0x287c8390 },
	{ 0x09700b84, 0x2566c62f, 0xa0bf8660, 0x33183a76, 0x575058f1, 0xd9398f59, 0x39d1cd34, 0x056d2ece },
	{ 0x1204dc7c, 0xda05b8d8, 0x06308d41, 0x48322ae6, 0x849e892c, 0x35358e27, 0xd62dd592, 0x040fcafb },
	{ 0x39397433, 0x47b3e759, 0x0d1c24d1, 0x6d3a3a92, 0x74f75f43, 0xa1341251, 0xee6ad556, 0x1b821f01 },
	{ 0x5bfdb854, 0x804ef705, 0x40ceeaf2, 0x7aa76b71, 0xb2fe89cb, 0xfcc95a68, 0xf1c406c7, 0x1d461c35 },
	{ 0x4d05eab8, 0xba13a0c7, 0x11ab3116, 0x2e015d63, 0x8ca5a05a, 0xb503922c, 0xfee394da, 0x06be15d7 },
	{ 0x79a04ed6, 0x894cdcbe, 0x44d30787, 0x956cde6a, 0xd7dbc15f, 0x59a1b62b, 0x9a806f4e, 0x12ebe410 },
	{ 0xb3ecdbd3, 0x1dd4522f, 0xd055f3ad, 0x68222a93, 0xb3d555e8, 0xbe9c7d66, 0x6194f846, 0x1b92f6b8 },
	{ 0xae4fcfb2, 0x48e72189, 0x8df85a07, 0x0a03fb3c, 0xea9b2e0a, 0xff4d8a35, 0xcd9c1d77, 0x28a98c2e },
	{ 0x280c1184, 0x1ef4b3b4, 0xae5e2a2c, 0xcf7ad4c2, 0xc5a36518, 0xb8063b6c, 0x65dfc08c, 0x2348c4b9 },
	{ 0x22a423de, 0x9c533be7, 0x7cdf6e0d, 0x642a9d12, 0x409ac005, 0x0dbc7546, 0xb23d5082, 0x00f04c8d },
	{ 0x83a24acc, 0xa2afb83f, 0x525d536e, 0x92f255d9, 0x0286dd19, 0x5e756608, 0xc52d2549, 0x187bb1a6 },
	{ 0x26817bb1, 0x0a79c430, 0x99537df0, 0x7bb2cc7c, 0x0241e6de, 0xb6ca27d5, 0x3632f04c, 0x007ab33f },
	{ 0x818f61bf, 0x8e9003e5, 0x9bf8fec2, 0x8c9bbf34, 0x3f01534e, 0x53dceecd, 0xe529aa3c, 0x2690966b },
	{ 0xbf574c64, 0x2214f7b1, 0xf7317df2, 0x28f9232f, 0xb0ad75cd, 0xe57584a8, 0xdc176d03, 0x2b81fb59 },
	{ 0x742f8f03, 0xf4b67d7c, 0x63d068cc, 0x681b2ddc, 0x1bfb576a, 0x8ce5bcef, 0xd2b63cfe, 0x167c2951 },
	{ 0xb5ad7c3f, 0xf8ad4ae2, 0x83cb85be, 0x2d60c6ff, 0x5d9429f7, 0xd976fd2b, 0x3f9ad9a9, 0x24407ce7 },
	{ 0x9edcef8b, 0x7f753d97, 0xb1479120, 0x5f3f172c, 0x74096c6e, 0x8db16279, 0x39c108cf, 0x2b377b35 },
	{ 0xa0000006, 0x974bc177, 0xda58a367, 0xf13771b2, 0x0908122e, 0x51e1a247, 0x4729c0fa, 0x2259d6b1 }
};

